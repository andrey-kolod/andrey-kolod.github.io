{"mappings":"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","sources":["<anon>","projects/mesto_project/src/components/backend.js"],"sourcesContent":["// Данные пользователя\nconst user = {\n    name: \"\\u0410\\u043D\\u0434\\u0440\\u0435\\u0439 \\u041A\",\n    about: \"\\u0418\\u0441\\u0441\\u043B\\u0435\\u0434\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044C \\u0420\\u043E\\u0441\\u0441\\u0438\\u0438\",\n    avatar: 'https://media.tenor.com/Qx0tjz2EN0gAAAAe/%D0%B7%D1%83%D0%B1%D1%80%D0%B8%D0%BB%D0%B0.png',\n    _id: '6d84618e3e02fd4c423a8d0b',\n    cohort: 'wff-cohort-9'\n};\n// Данные карточек\nconst cards = [\n    {\n        name: \"\\u041D\\u043E\\u0432\\u043E\\u0440\\u043E\\u0441\\u0441\\u0438\\u0439\\u0441\\u043A\",\n        link: 'https://admnvrsk.ru/upload/resize_cache/iblock/387/865_497_2/9h9n3jbo8uh22enraxfd7xlvpr3d649z.jpg',\n        owner: {\n            _id: '682c60609bc8f3ab2e4d6f7d'\n        },\n        likes: [\n            {\n                name: \"\\u0411\\u043E\\u0440\\u044F\",\n                about: 'Photographer',\n                _id: '682c60609bc8f3ab2e4d6f7d'\n            }\n        ],\n        _id: '68476c66d3ff6e148b0e82bc',\n        createdAt: '2025-06-09T23:21:10.790Z'\n    },\n    {\n        name: \"\\u041C\\u043E\\u0441\\u043A\\u0432\\u0430\",\n        link: 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/a2/Moscow-City2015.jpg/330px-Moscow-City2015.jpg',\n        owner: {\n            _id: '682c60609bc8f3ab2e4d6f7d'\n        },\n        likes: [\n            {\n                name: \"\\u0411\\u043E\\u0440\\u044F\",\n                about: 'Photographer',\n                _id: '682c60609bc8f3ab2e4d6f7d'\n            },\n            {\n                name: \"\\u0424\\u0438\\u043B\\u044F\\u043D\",\n                about: \"\\u0424\\u043E\\u0442\\u043E\\u0433\\u0440\\u0430\\u0444\",\n                _id: '682c60609bc8f3ab2e4d6f7d'\n            },\n            {\n                name: \"\\u0424\\u0438\\u043B\\u044F\\u043Da\",\n                about: \"\\u0424\\u043E\\u0442\\u043E\\u0433\\u0440\\u0430\\u0444\",\n                _id: '682c60609bc8f3ab2e4d6f7a'\n            }\n        ],\n        _id: '68476c66d3ff6e148b0e82bd',\n        createdAt: '2025-06-09T23:21:10.790Z'\n    },\n    {\n        name: \"\\u0421\\u0430\\u043D\\u043A\\u0442-\\u041F\\u0435\\u0442\\u0435\\u0440\\u0431\\u0443\\u0440\\u0433\",\n        link: 'https://sokroma.ru/upload/resize_cache/webp/iblock/741/ce4j337r6oe7evt2xy87jtoixlrs0pdy.webp',\n        owner: {\n            _id: '682c60609bc8f3ab2e4d6f7d'\n        },\n        likes: [\n            {\n                name: \"\\u0411\\u043E\\u0440\\u044F\",\n                about: 'Photographer',\n                _id: '682c60609bc8f3ab2e4d6f7d'\n            },\n            {\n                name: \"\\u0424\\u0438\\u043B\\u044F\\u043D\",\n                about: \"\\u0424\\u043E\\u0442\\u043E\\u0433\\u0440\\u0430\\u0444\",\n                _id: '682c60609bc8f3ab2e4d6f7d'\n            },\n            {\n                name: \"\\u0416\\u0430\\u043A-\\u0418\\u0432 \\u041A\\u0443\\u0441\\u0442\\u043E\",\n                about: \"\\u0418\\u0441\\u0441\\u043B\\u0435\\u0434\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044C \\u043E\\u043A\\u0435\\u0430\\u043D\\u0430\",\n                _id: '6d84618e3e02fd4c423a8d0b'\n            }\n        ],\n        _id: '68476c66d3ff6e148b0e82bb',\n        createdAt: '2025-06-09T23:21:10.790Z'\n    },\n    {\n        name: \"\\u041C\\u0443\\u0440\\u043C\\u0430\\u043D\\u0441\\u043A\",\n        link: 'https://sdelanounas.ru/i/a/w/1/f_aW1nLmdlbGlvcGhvdG8uY29tL211cm1hbnNrLzE0X211ci5qcGc_X19pZD0xMTgyNzg=.jpeg',\n        owner: {\n            _id: '6d84618e3e02fd4c423a8d0b'\n        },\n        likes: [\n            {\n                name: \"\\u0411\\u043E\\u0440\\u044F\",\n                about: 'Photographer',\n                _id: '682c60609bc8f3ab2e4d6f7d'\n            }\n        ],\n        _id: '6d84618e3e02fd4c423a8d0b',\n        createdAt: '2025-06-19T23:21:10.790Z'\n    }\n];\n// Сохраняем оригинальный fetch\nconst originalFetch = window.fetch;\n// Перехватываем fetch для имитации сервера\nwindow.fetch = (url, options)=>{\n    const path = url.replace('./backend.js', '');\n    // GET /users/me - данные профиля\n    if (options.method === 'GET' && path === '/users/me') return Promise.resolve({\n        ok: true,\n        json: ()=>user\n    });\n    else if (options.method === 'GET' && path === '/cards') return Promise.resolve({\n        ok: true,\n        json: ()=>cards\n    });\n    else if (options.method === 'PATCH' && path === '/users/me') {\n        const data = JSON.parse(options.body);\n        user.name = data.name;\n        user.about = data.about;\n        return Promise.resolve({\n            ok: true,\n            json: ()=>user\n        });\n    } else if (options.method === 'POST' && path === '/cards') {\n        const data = JSON.parse(options.body);\n        const newCard = {\n            name: data.name,\n            link: data.link,\n            owner: {\n                _id: user._id\n            },\n            likes: [],\n            _id: Date.now().toString(),\n            createdAt: new Date().toISOString()\n        };\n        cards.push(newCard);\n        return Promise.resolve({\n            ok: true,\n            json: ()=>newCard\n        });\n    } else if (options.method === 'PUT' && path.startsWith('/cards/likes/')) {\n        const card_id = path.split('/')[3];\n        const card = cards.find((card)=>card._id === card_id);\n        if (card) {\n            if (!card.likes.some((like)=>like._id === user._id)) card.likes.push(user);\n            return Promise.resolve({\n                ok: true,\n                json: ()=>card\n            });\n        } else return Promise.reject(\"\\u041A\\u0430\\u0440\\u0442\\u043E\\u0447\\u043A\\u0430 \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u0430\");\n    } else if (options.method === 'DELETE' && path.startsWith('/cards/likes/')) {\n        const card_id = path.split('/')[3];\n        const card = cards.find((card)=>card._id === card_id);\n        if (card) {\n            card.likes = card.likes.filter((like)=>like._id !== user._id);\n            return Promise.resolve({\n                ok: true,\n                json: ()=>card\n            });\n        } else return Promise.reject(\"\\u041A\\u0430\\u0440\\u0442\\u043E\\u0447\\u043A\\u0430 \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u0430\");\n    } else if (options.method === 'DELETE' && path.startsWith('/cards/likes/')) {\n        const card_id = path.split('/')[3];\n        const card = cards.find((card)=>card._id === card_id);\n        if (card) {\n            card.likes = card.likes.filter((like)=>like._id !== user._id);\n            return Promise.resolve({\n                ok: true,\n                json: ()=>card\n            });\n        } else return Promise.reject(\"\\u041A\\u0430\\u0440\\u0442\\u043E\\u0447\\u043A\\u0430 \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u0430\");\n    } else if (options.method === 'PATCH' && path === '/users/me/avatar') {\n        const data = JSON.parse(options.body);\n        user.avatar = data.avatar;\n        return Promise.resolve({\n            ok: true,\n            json: ()=>user\n        });\n    } else return originalFetch(url, options);\n};\n\n//# sourceMappingURL=mesto_project.d023422e.js.map\n","// Данные пользователя\r\nconst user = {\r\n  name: 'Андрей К',\r\n  about: 'Исследователь России',\r\n  avatar: 'https://media.tenor.com/Qx0tjz2EN0gAAAAe/%D0%B7%D1%83%D0%B1%D1%80%D0%B8%D0%BB%D0%B0.png',\r\n  _id: '6d84618e3e02fd4c423a8d0b',\r\n  cohort: 'wff-cohort-9'\r\n};\r\n\r\n// Данные карточек\r\nconst cards = [\r\n  {\r\n    name: 'Новороссийск',\r\n    link: 'https://admnvrsk.ru/upload/resize_cache/iblock/387/865_497_2/9h9n3jbo8uh22enraxfd7xlvpr3d649z.jpg',\r\n    owner: { _id: '682c60609bc8f3ab2e4d6f7d' },\r\n    likes: [{ name: 'Боря', about: 'Photographer', _id: '682c60609bc8f3ab2e4d6f7d' }\r\n    ],\r\n    _id: '68476c66d3ff6e148b0e82bc',\r\n    createdAt: '2025-06-09T23:21:10.790Z'\r\n  },\r\n  {\r\n    name: 'Москва',\r\n    link: 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/a2/Moscow-City2015.jpg/330px-Moscow-City2015.jpg',\r\n    owner: { _id: '682c60609bc8f3ab2e4d6f7d' },\r\n    likes: [{ name: 'Боря', about: 'Photographer', _id: '682c60609bc8f3ab2e4d6f7d' },\r\n        { name: 'Филян', about: 'Фотограф', _id: '682c60609bc8f3ab2e4d6f7d' },\r\n        { name: 'Филянa', about: 'Фотограф', _id: '682c60609bc8f3ab2e4d6f7a' },\r\n    ],\r\n    _id: '68476c66d3ff6e148b0e82bd',\r\n    createdAt: '2025-06-09T23:21:10.790Z'\r\n  },\r\n  {\r\n    name: 'Санкт-Петербург',\r\n    link: 'https://sokroma.ru/upload/resize_cache/webp/iblock/741/ce4j337r6oe7evt2xy87jtoixlrs0pdy.webp',\r\n    owner: { _id: '682c60609bc8f3ab2e4d6f7d' },\r\n    likes: [{ name: 'Боря', about: 'Photographer', _id: '682c60609bc8f3ab2e4d6f7d' },\r\n        { name: 'Филян', about: 'Фотограф', _id: '682c60609bc8f3ab2e4d6f7d' },\r\n        { name: 'Жак-Ив Кусто', about: 'Исследователь океана', _id: '6d84618e3e02fd4c423a8d0b' }\r\n    ],\r\n    _id: '68476c66d3ff6e148b0e82bb',\r\n    createdAt: '2025-06-09T23:21:10.790Z'\r\n  },\r\n  { name: 'Мурманск',\r\n    link: 'https://sdelanounas.ru/i/a/w/1/f_aW1nLmdlbGlvcGhvdG8uY29tL211cm1hbnNrLzE0X211ci5qcGc_X19pZD0xMTgyNzg=.jpeg',\r\n    owner: { _id: '6d84618e3e02fd4c423a8d0b' },\r\n    likes: [{ name: 'Боря', about: 'Photographer', _id: '682c60609bc8f3ab2e4d6f7d' }],\r\n    _id: '6d84618e3e02fd4c423a8d0b',\r\n    createdAt: '2025-06-19T23:21:10.790Z'\r\n  },\r\n];\r\n\r\n// Сохраняем оригинальный fetch\r\nconst originalFetch = window.fetch;\r\n\r\n// Перехватываем fetch для имитации сервера\r\nwindow.fetch = (url, options) => {\r\n  const path = url.replace('./backend.js', '');\r\n\r\n  // GET /users/me - данные профиля\r\n  if (options.method === 'GET' && path === '/users/me') {\r\n    return Promise.resolve({ ok: true, json: () => user });\r\n  }\r\n\r\n  // GET /cards - список карточек\r\n  else if (options.method === 'GET' && path === '/cards') {\r\n    return Promise.resolve({ ok: true, json: () => cards });\r\n  }\r\n\r\n  // PATCH /users/me - обновление профиля\r\n  else if (options.method === 'PATCH' && path === '/users/me') {\r\n    const data = JSON.parse(options.body);\r\n    user.name = data.name;\r\n    user.about = data.about;\r\n    return Promise.resolve({ ok: true, json: () => user });\r\n  }\r\n\r\n  // POST /cards - добавление карточки\r\n  else if (options.method === 'POST' && path === '/cards') {\r\n    const data = JSON.parse(options.body);\r\n    const newCard = {\r\n      name: data.name,\r\n      link: data.link,\r\n      owner: { _id: user._id },\r\n      likes: [],\r\n      _id: Date.now().toString(),\r\n      createdAt: new Date().toISOString()\r\n    };\r\n    cards.push(newCard);\r\n    return Promise.resolve({ ok: true, json: () => newCard });\r\n  }\r\n\r\n  // PUT /cards/likes/:card_id - поставить лайк\r\nelse if (options.method === 'PUT' && path.startsWith('/cards/likes/')) {\r\n  const card_id = path.split('/')[3];\r\n  const card = cards.find(card => card._id === card_id);\r\n  if (card) {\r\n    if (!card.likes.some(like => like._id === user._id)) {\r\n      card.likes.push(user);\r\n    }\r\n    return Promise.resolve({ ok: true, json: () => card });\r\n  } else {\r\n    return Promise.reject('Карточка не найдена');\r\n  }\r\n}\r\n\r\n// DELETE /cards/likes/:card_id - убрать лайк\r\nelse if (options.method === 'DELETE' && path.startsWith('/cards/likes/')) {\r\n  const card_id = path.split('/')[3];\r\n  const card = cards.find(card => card._id === card_id);\r\n  if (card) {\r\n    card.likes = card.likes.filter(like => like._id !== user._id);\r\n    return Promise.resolve({ ok: true, json: () => card });\r\n  } else {\r\n    return Promise.reject('Карточка не найдена');\r\n  }\r\n}\r\n\r\n  // DELETE /cards/likes/:card_id - убрать лайк\r\n  else if (options.method === 'DELETE' && path.startsWith('/cards/likes/')) {\r\n    const card_id = path.split('/')[3];\r\n    const card = cards.find(card => card._id === card_id);\r\n    if (card) {\r\n      card.likes = card.likes.filter(like => like._id !== user._id);\r\n      return Promise.resolve({ ok: true, json: () => card });\r\n    } else {\r\n      return Promise.reject('Карточка не найдена');\r\n    }\r\n  }\r\n\r\n  // PATCH /users/me/avatar - обновление аватара\r\n  else if (options.method === 'PATCH' && path === '/users/me/avatar') {\r\n    const data = JSON.parse(options.body);\r\n    user.avatar = data.avatar;\r\n    return Promise.resolve({ ok: true, json: () => user });\r\n  }\r\n\r\n  // Для необработанных запросов используем оригинальный fetch\r\n  else {\r\n    return originalFetch(url, options);\r\n  }\r\n};"],"names":["user","name","about","avatar","_id","cohort","cards","link","owner","likes","createdAt","originalFetch","window","fetch","url","options","path","replace","method","Promise","resolve","ok","json","data","JSON","parse","body","newCard","Date","now","toString","toISOString","push","startsWith","card_id","split","card","find","some","like","reject","filter"],"version":3,"file":"mesto_project.d023422e.js.map"}