{"mappings":"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","sources":["projects/mesto_project/src/components/backend.js"],"sourcesContent":["// Данные пользователя\r\nconst user = {\r\n  name: 'Андрей К',\r\n  about: 'Исследователь России',\r\n  avatar: 'https://media.tenor.com/Qx0tjz2EN0gAAAAe/%D0%B7%D1%83%D0%B1%D1%80%D0%B8%D0%BB%D0%B0.png',\r\n  _id: '6d84618e3e02fd4c423a8d0b',\r\n  cohort: 'wff-cohort-9'\r\n};\r\n\r\n// Данные карточек\r\nconst cards = [\r\n  {\r\n    name: 'Новороссийск',\r\n    link: 'https://admnvrsk.ru/upload/resize_cache/iblock/387/865_497_2/9h9n3jbo8uh22enraxfd7xlvpr3d649z.jpg',\r\n    owner: { _id: '682c60609bc8f3ab2e4d6f7d' },\r\n    likes: [{ name: 'Боря', about: 'Photographer', _id: '682c60609bc8f3ab2e4d6f7d' }\r\n    ],\r\n    _id: '68476c66d3ff6e148b0e82bc',\r\n    createdAt: '2025-06-09T23:21:10.790Z'\r\n  },\r\n  {\r\n    name: 'Москва',\r\n    link: 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/a2/Moscow-City2015.jpg/330px-Moscow-City2015.jpg',\r\n    owner: { _id: '682c60609bc8f3ab2e4d6f7d' },\r\n    likes: [{ name: 'Боря', about: 'Photographer', _id: '682c60609bc8f3ab2e4d6f7d' },\r\n        { name: 'Филян', about: 'Фотограф', _id: '682c60609bc8f3ab2e4d6f7d' },\r\n        { name: 'Филянa', about: 'Фотограф', _id: '682c60609bc8f3ab2e4d6f7a' },\r\n    ],\r\n    _id: '68476c66d3ff6e148b0e82bd',\r\n    createdAt: '2025-06-09T23:21:10.790Z'\r\n  },\r\n  {\r\n    name: 'Санкт-Петербург',\r\n    link: 'https://sokroma.ru/upload/resize_cache/webp/iblock/741/ce4j337r6oe7evt2xy87jtoixlrs0pdy.webp',\r\n    owner: { _id: '682c60609bc8f3ab2e4d6f7d' },\r\n    likes: [{ name: 'Боря', about: 'Photographer', _id: '682c60609bc8f3ab2e4d6f7d' },\r\n        { name: 'Филян', about: 'Фотограф', _id: '682c60609bc8f3ab2e4d6f7d' },\r\n        { name: 'Жак-Ив Кусто', about: 'Исследователь океана', _id: '6d84618e3e02fd4c423a8d0b' }\r\n    ],\r\n    _id: '68476c66d3ff6e148b0e82bb',\r\n    createdAt: '2025-06-09T23:21:10.790Z'\r\n  },\r\n  { name: 'Мурманск',\r\n    link: 'https://sdelanounas.ru/i/a/w/1/f_aW1nLmdlbGlvcGhvdG8uY29tL211cm1hbnNrLzE0X211ci5qcGc_X19pZD0xMTgyNzg=.jpeg',\r\n    owner: { _id: '6d84618e3e02fd4c423a8d0b' },\r\n    likes: [{ name: 'Боря', about: 'Photographer', _id: '682c60609bc8f3ab2e4d6f7d' }],\r\n    _id: '6d84618e3e02fd4c423a8d0b',\r\n    createdAt: '2025-06-19T23:21:10.790Z'\r\n  },\r\n];\r\n\r\n// Сохраняем оригинальный fetch\r\nconst originalFetch = window.fetch;\r\n\r\n// Перехватываем fetch для имитации сервера\r\nwindow.fetch = (url, options) => {\r\n  const path = url.replace('./backend.js', '');\r\n\r\n  // GET /users/me - данные профиля\r\n  if (options.method === 'GET' && path === '/users/me') {\r\n    return Promise.resolve({ ok: true, json: () => user });\r\n  }\r\n\r\n  // GET /cards - список карточек\r\n  else if (options.method === 'GET' && path === '/cards') {\r\n    return Promise.resolve({ ok: true, json: () => cards });\r\n  }\r\n\r\n  // PATCH /users/me - обновление профиля\r\n  else if (options.method === 'PATCH' && path === '/users/me') {\r\n    const data = JSON.parse(options.body);\r\n    user.name = data.name;\r\n    user.about = data.about;\r\n    return Promise.resolve({ ok: true, json: () => user });\r\n  }\r\n\r\n  // POST /cards - добавление карточки\r\n  else if (options.method === 'POST' && path === '/cards') {\r\n    const data = JSON.parse(options.body);\r\n    const newCard = {\r\n      name: data.name,\r\n      link: data.link,\r\n      owner: { _id: user._id },\r\n      likes: [],\r\n      _id: Date.now().toString(),\r\n      createdAt: new Date().toISOString()\r\n    };\r\n    cards.push(newCard);\r\n    return Promise.resolve({ ok: true, json: () => newCard });\r\n  }\r\n\r\n  // PUT /cards/likes/:card_id - поставить лайк\r\nelse if (options.method === 'PUT' && path.startsWith('/cards/likes/')) {\r\n  const card_id = path.split('/')[3];\r\n  const card = cards.find(card => card._id === card_id);\r\n  if (card) {\r\n    if (!card.likes.some(like => like._id === user._id)) {\r\n      card.likes.push(user);\r\n    }\r\n    return Promise.resolve({ ok: true, json: () => card });\r\n  } else {\r\n    return Promise.reject('Карточка не найдена');\r\n  }\r\n}\r\n\r\n// DELETE /cards/likes/:card_id - убрать лайк\r\nelse if (options.method === 'DELETE' && path.startsWith('/cards/likes/')) {\r\n  const card_id = path.split('/')[3];\r\n  const card = cards.find(card => card._id === card_id);\r\n  if (card) {\r\n    card.likes = card.likes.filter(like => like._id !== user._id);\r\n    return Promise.resolve({ ok: true, json: () => card });\r\n  } else {\r\n    return Promise.reject('Карточка не найдена');\r\n  }\r\n}\r\n\r\n  // DELETE /cards/likes/:card_id - убрать лайк\r\n  else if (options.method === 'DELETE' && path.startsWith('/cards/likes/')) {\r\n    const card_id = path.split('/')[3];\r\n    const card = cards.find(card => card._id === card_id);\r\n    if (card) {\r\n      card.likes = card.likes.filter(like => like._id !== user._id);\r\n      return Promise.resolve({ ok: true, json: () => card });\r\n    } else {\r\n      return Promise.reject('Карточка не найдена');\r\n    }\r\n  }\r\n\r\n  // PATCH /users/me/avatar - обновление аватара\r\n  else if (options.method === 'PATCH' && path === '/users/me/avatar') {\r\n    const data = JSON.parse(options.body);\r\n    user.avatar = data.avatar;\r\n    return Promise.resolve({ ok: true, json: () => user });\r\n  }\r\n\r\n  // Для необработанных запросов используем оригинальный fetch\r\n  else {\r\n    return originalFetch(url, options);\r\n  }\r\n};"],"names":[],"version":3,"file":"mesto_project.e3c3b709.js.map","sourceRoot":"/__parcel_source_root/"}